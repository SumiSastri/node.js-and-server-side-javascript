Transcript: So now comes the time to handle errors in our APIs. How do you go about it, and what middleware is available in Express? The beauty of Express is that there is a default error handler built into your code without a single line of code. So let's go inside of VS Code, go inside of index.js, and in the get, so let's scroll all the way up to the item ID, or actually let's go to the item instead. So let's go here to the app.route item on line 48, and what we'll do is basically throw an error instead of sending it this thing here. So let's go and throw an error, and the way you do this is by doing throw new Error, and that is a function, and that will automatically throw an error for us. So basically we're simulating or we're forcing an error to happen on this particular route when we're getting it, and what we'll do, we'll do that in the browser. So let's save this, and let's go back to our browser, and let's go to item like so, and return that. So as you can see, when we throw an error or when there's an error occurring inside of our application, Express already handles that without doing any line of code or adding any code to our application. So it does the error, and then it tells you where the error is in your application, but let's say you'd like to have a custom error middleware with custom messages and logic. You can also do this. Be aware that your error handling middleware needs to be last after any other app.use and route calls in your application. So let me demonstrate that. So let's go back to VS Code. So let's create a custom error handling function. So the way to do this, again, you want to put this one right after the last route or before app.listen. So I usually look for a app.listen, which is usually the last thing you put in your index.js file, and then I put my error handling functions in there. So let's do this. So let me just do some notes here. So error handling function. So we'll customize this, and, again, Express is very, very intelligent about this. So if we don't have any explicit error handling function, Express will automatically use the default one that's in its own code. So let's do app.use, and when you do that you need a couple of arguments when you want to do error handling, and basically, as soon as you add error in next with request and response in your arguments, so Express implies that you are creating an error handling function. So let's go ahead and do our function here, but let's just close that because we need that at the end and not here. So let's make sure that we have our stuff in order. So let's do a console.error, and do the error stack. So basically we're console logging what is the error stack, and basically this is what we're looking at here. This is the error stack. So we're somewhat replicating what's inside of Express, but then we can actually customize it here. So we could do a response status, and basically the status method with the response APIs are basically when you have a status of specific numbers like 500, 44, and so on and so forth, you can go ahead and send whatever you're going to send next. So in this case we could do HTML, we could do an object, and in my case I'm going to do a message here. So let's do template strings again. So red alert, red alert again, and then publish the error stack, the one that you saw on the browser. So error stack like so. So basically what happens here is whenever we get an error, so right now we're doing an error in the route /item, so we're throwing an error, then what Express does is look, it looks if it has any custom error handling function. If it does, it's going to use that. If not, then it's going to use the default one as part of its library. So in this case we've created a new one, and then let's save that, and let's go back to our browser and refresh our browser with this particular path, and then we get red alert, red alert, error at, and then we get the error stack, and this is the expected behavior. So this is the way to create a custom error handler, and you can basically add anything you want in this handler. So logic, HTML, download the file, et cetera. So let's move on.